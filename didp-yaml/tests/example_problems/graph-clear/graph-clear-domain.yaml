domain: graph-clear
reduce: min
cost_type: integer
objects:
  - node
state_variables:
  - name: clean
    type: set
    object: node
tables:
  - name: all_nodes
    type: set
    object: node
  - name: node_weight
    type: integer
    args:
      - node
  - name: edge_weight
    type: integer
    args:
      - node
      - node
  - name: node_edge_weight
    type: integer
    args:
      - node
state_functions:
  - name: contaminated
    type: set
    expression: ~clean
  - name: clean_edge_weight
    type: integer
    parameters:
      - name: c
        object: node
    expression: (sum edge_weight c clean)
  - name: contaminated_edge_weight
    type: integer
    parameters:
      - name: c
        object: node
    expression: (sum edge_weight c contaminated)
transitions:
  - name: sweep
    parameters:
      - name: c
        object: node
    cost: (max cost
      (+ (node_edge_weight c)
      (sum edge_weight clean (remove c contaminated))))
    effect:
      clean: (add c clean)
    preconditions:
      - (not (is_in c clean))
transition_dominance:
  - dominating:
      name: sweep
      parameters:
        - name: i
          object: node
    dominated:
      name: sweep
      parameters:
        - name: j
          object: node
    conditions:
      - (<= (+ (node_weight i) (contaminated_edge_weight i))
        (+ (node_weight j) (contaminated_edge_weight j)))
      - (<= (contaminated_edge_weight i) (clean_edge_weight i))
base_cases:
  - - (= clean all_nodes)
dual_bounds:
  - 0
